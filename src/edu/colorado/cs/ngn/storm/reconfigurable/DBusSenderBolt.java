package edu.colorado.cs.ngn.storm.reconfigurable;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.freedesktop.dbus.DBusConnection;
import org.freedesktop.dbus.exceptions.DBusException;

import backtype.storm.task.OutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichBolt;
import backtype.storm.tuple.Tuple;
import edu.colorado.cs.ngn.sdihc.Switch;

public class DBusSenderBolt extends BaseRichBolt {
	/**
	 * autogenerated ID
	 */
	private static final long serialVersionUID = 1L;
	private ExecutorService execService;
	private DBusConnection connection;
	
	@Override
	public void execute(Tuple arg0) {
		execService.execute(new DBusSenderTask(connection, arg0));
	}

	@Override
	public void prepare(@SuppressWarnings("rawtypes") Map arg0, TopologyContext arg1, OutputCollector arg2) {
		execService = Executors.newCachedThreadPool();
		try {
			connection = DBusConnection.getConnection(DBusConnection.SESSION);
		} catch (DBusException e) {
			System.out.println("Could not get DBus connection");
			e.printStackTrace();
		}
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer arg0) {
	}
	
	@Override
	public void cleanup(){
		connection.disconnect();
		execService.shutdown();
		try {
			execService.awaitTermination(DBusReceiverSpout.SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			System.out.println("Could not shutdown executor service in "+DBusReceiverSpout.SHUTDOWN_TIMEOUT+" ms in "+this.getClass().getCanonicalName());
		}
	}
	
	private class DBusSenderTask implements Runnable{
		private DBusConnection connection;
		private Tuple tuple;
		
		public DBusSenderTask(DBusConnection connection, Tuple tuple){
			this.connection = connection;
			this.tuple = tuple;
		}

		@Override
		public void run() {
			try {
//				Switch dbusSwitch = connection.getRemoteObject(DBusReceiverSpout.CONNECTION_ID, "/edu/colorado/cs/ngn/sdipc/Switch", Switch.class);
				Switch dbusSwitch = connection.getRemoteObject(DBusReceiverSpout.CONNECTION_ID, DBusReceiverSpout.SWITCH_OBJECT_PATH, Switch.class);
//				String objectStringBytes = DBusReceiverSpout.flattenDBusList((List<Object>) tuple.getValues().get(0));
//				if(objectStringBytes != null){
//					dbusSwitch.engueue(objectStringBytes);
//				}
//				System.out.println("Received data: " + tuple.getValues().get(0));
			} catch (DBusException e) {
				System.out.println("Could not get remote object: "+DBusReceiverSpout.CONNECTION_ID);
				e.printStackTrace();
			}
			
		}
	}

}
